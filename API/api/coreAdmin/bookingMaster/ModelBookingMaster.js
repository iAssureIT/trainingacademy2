const mongoose = require('mongoose');

const bookingMasterSchema = mongoose.Schema({
    _id                         : mongoose.Schema.Types.ObjectId,
    packageTypeId               : { type: mongoose.Schema.Types.ObjectId, ref: 'packagetypemasters' },
    packageId                   : { type: mongoose.Schema.Types.ObjectId, ref: 'packagemasters' },
    contractId                  : { type: mongoose.Schema.Types.ObjectId, ref: 'contracts' },
    bookingId                   : Number,
    tripType                    : String,
    pickupFrom                  : String,
    from                        : {
                                        address     : String,
                                        area        : String,
                                        city        : String,
                                        state       : String,
                                        country     : String,
                                        pincode     : String,
                                        formattedaddress     : String,
                                        latitude    : Number,
                                        longitude   : Number,
                                },
    to                          : {
                                        address     : String,
                                        area        : String,
                                        city        : String,
                                        state       : String,
                                        country     : String,
                                        pincode     : String,
                                        formattedaddress     : String,
                                        latitude    : Number,
                                        longitude   : Number,
                                },                                 
    pickupDate                  : Date,
    pickupTime                  : String,
    returnDate                  : Date,
    returnTime                  : String,
    specialInstruction          : String,
    purposeOfTravel             : String,
    purposeOfTravelOther        : String,
    reasonForSelectingVehicle   : String,
    signature                   : String,
    vehicleCategoryId           : { type: mongoose.Schema.Types.ObjectId, ref: 'categorymasters' },
    vehicleID                   : { type: mongoose.Schema.Types.ObjectId, ref: 'vehiclemasters' },
    employeeId                  : { type: mongoose.Schema.Types.ObjectId, ref: 'personmasters' },
    employeeUserId              : { type: mongoose.Schema.Types.ObjectId, ref: 'users' },
    departmentId                : { type: mongoose.Schema.Types.ObjectId, ref: 'departmentmasters' },
    corporateId                 : { type: mongoose.Schema.Types.ObjectId, ref: 'entitymasters' },
    managerId1                  : { type: mongoose.Schema.Types.ObjectId, ref: 'personmasters' },
    managerId2                  : { type: mongoose.Schema.Types.ObjectId, ref: 'personmasters' },
    managerId3                  : { type: mongoose.Schema.Types.ObjectId, ref: 'personmasters' },
    managerID1                  : String,
    managerID2                  : String,
    managerID3                  : String,
    approver1exist               : String,
    approver2exist               : String,
    approver3exist               : String,
    approvalRequired            : String,
    estimatedCost               : Number,
    intermediateStops           : [{
                                    address     : String,
                                    area        : String,
                                    city        : String,
                                    state       : String,
                                    country     : String,
                                    pincode     : String,
                                    latitude    : String,
                                    longitude   : String    
                                }],
    status                      : [{
                                    value               : String,
                                    statusBy            : { type: mongoose.Schema.Types.ObjectId, ref: 'users' },
                                    allocatedTo         : { type: mongoose.Schema.Types.ObjectId, ref: 'personmasters' },
                                    allocatedToDriver   : { type: mongoose.Schema.Types.ObjectId, ref: 'personmasters' },
                                    allocatedToVendor   : { type: mongoose.Schema.Types.ObjectId, ref: 'entitymasters' },
                                    statusAt            : Date,
                                    remark              : String,
                                    latitude            : Number,
                                    longitude           : Number,
                                    startOTP            : Number,
                                    endOTP              : Number,
                                    odometerReading     : Number,
                                    proof               : String,  
                                }],
    statusValue                 : String,                                                           
    routeCoordinates            : [{
                                    latitude            : Number,
                                    longitude           : Number,
                                    distanceTravelled   : Number,
                                    stop                : Boolean,
                                }],
    tripExpenses                : Array,
    createdBy                   : { type: mongoose.Schema.Types.ObjectId, ref: 'users' },
    createdAt                   : Date,
    updateLog                   : [{
                                    updatedAt           : Date,
                                    updatedBy           : { type: mongoose.Schema.Types.ObjectId, ref: 'users' } 
                                }]
});

module.exports = mongoose.model('bookingmasters',bookingMasterSchema);
